{
  "address": "0x5F9374Daa60523D0363c2094BE4047EEC616e46E",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bounty",
          "type": "address"
        }
      ],
      "name": "BountyCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bounties",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bountyTemplate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_dataCID",
          "type": "bytes"
        }
      ],
      "name": "createBounty",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x720e88f855c54bea667c45831e215dc903c665146d427b12e702c7f20e6332e1",
  "receipt": {
    "to": null,
    "from": "0x3d2BA294f2771FA259a0EC36524BfcfC19F82D7c",
    "contractAddress": "0x5F9374Daa60523D0363c2094BE4047EEC616e46E",
    "transactionIndex": 0,
    "gasUsed": "83000760",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
    "blockHash": "0xe055fe1f45c80edc78df57b6a4cb65cb48892386bbbce26091f828996539cbb4",
    "transactionHash": "0x720e88f855c54bea667c45831e215dc903c665146d427b12e702c7f20e6332e1",
    "logs": [],
    "blockNumber": 40577,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "80c61c4fc2f66d04f6be1628af1d6e40",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bounty\",\"type\":\"address\"}],\"name\":\"BountyCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bounties\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bountyTemplate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_dataCID\",\"type\":\"bytes\"}],\"name\":\"createBounty\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BountyFactory.sol\":\"BountyFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x888d64d221d52c31d015b76e50ca1af5ef8ff076550810b49cea6b01d8267a10\",\"license\":\"MIT\"},\"contracts/Bounty.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./IVerifier.sol\\\";\\n\\ncontract Bounty is Initializable, OwnableUpgradeable {\\n    // variables set by bounty provier at Tx 1 (constructor)\\n    string public name;\\n    string public description;\\n    bytes public dataCID;\\n    // reward amount is not stored, use contract balance instead\\n\\n    // variables set by bounty hunter at Tx 2\\n    address public bountyHunter;\\n    bytes public zkeyCID;\\n    bytes public circomCID;\\n    IVerifier public verifier;\\n    uint[2] public a;\\n    uint[2][2] public b;\\n    uint[2] public c;\\n    uint[] public hashedInput;\\n\\n    // variables set by bounty provider at Tx 3\\n    bool public isComplete;\\n\\n    // variabels set by bounty hunter at Tx 4\\n    uint[] public input;\\n\\n    uint8 public constant CID_VERSION = 1;\\n    uint8 public constant CID_CODEC = 0x55; // for raw buffer\\n    uint8 public constant CID_HASH = 0x12; // for sha256\\n    uint8 public constant CID_LENGTH = 32; // for sha256\\n\\n    // ! current design only allows one bounty hunter to submit proof\\n    // TODO: allow multiple bounty hunters to submit proof\\n\\n    event BountySubmitted();\\n    event BountyReleased();\\n    event BountyClaimed();\\n\\n    /*\\n        Tx 1\\n        * take owner address from factory\\n        * set bounty details\\n        * receive native tokens as bounty reward\\n    */\\n    function initialize (\\n        address _owner,\\n        string memory _name,\\n        string memory _description,\\n        bytes memory _dataCID\\n    ) public payable initializer {\\n        require(msg.value > 0, \\\"Bounty reward must be greater than 0\\\");\\n        __Ownable_init();\\n        transferOwnership(_owner);\\n        name = _name;\\n        description = _description;\\n        dataCID = _dataCID;\\n    }\\n\\n    /*\\n        Tx 2: submit bounty\\n        * submit CID of zkey, circom\\n        * submit verifier address\\n        * submit proof\\n    */\\n    function submitBounty(\\n        bytes memory _zkeyCID,\\n        bytes memory _circomCID,\\n        address _verifier,\\n        uint[2] memory _a,\\n        uint[2][2] memory _b,\\n        uint[2] memory _c,\\n        uint[] memory _hashedInput\\n        /*\\n         * should be length 4, will extend to support arbitrary length\\n         * first two elements are hash of computed results\\n         * last two elements are the dataCID\\n         */\\n    ) public {\\n        require(_hashedInput.length == 4, \\\"Invalid hashed input length\\\"); // TODO: support arbitrary length\\n        require(bountyHunter == address(0), \\\"Bounty already submitted\\\");\\n        // verifier address should not be 0x0\\n        require(_verifier != address(0), \\\"Invalid verifier address\\\");\\n        // * can save gas by pre-hashing dataCID\\n        require(\\n            keccak256(dataCID) ==\\n                keccak256(\\n                    abi.encodePacked(\\n                        CID_VERSION,\\n                        CID_CODEC,\\n                        CID_HASH,\\n                        CID_LENGTH,\\n                        concatDigest(_hashedInput[2], _hashedInput[3])\\n                    )\\n                ),\\n            \\\"Data CID mismatch\\\"\\n        );\\n\\n        verifier = IVerifier(_verifier);\\n        require(verifier.verifyProof(_a, _b, _c, _hashedInput), \\\"Invalid proof\\\");\\n        a = _a;\\n        b = _b;\\n        c = _c;\\n        hashedInput = _hashedInput;\\n\\n        zkeyCID = _zkeyCID;\\n        circomCID = _circomCID;\\n\\n        bountyHunter = msg.sender;\\n\\n        emit BountySubmitted();\\n    }\\n\\n    /*\\n        Tx 3: release bounty\\n        * only callable by bounty provider\\n        * only callable if bounty is not complete\\n        * only callable if bounty hunter has submitted proof\\n    */\\n    function releaseBounty() public onlyOwner {\\n        require(!isComplete, \\\"Bounty is already complete\\\");\\n        require(a[0] != 0, \\\"Bounty hunter has not submitted proof\\\");\\n        isComplete = true;\\n\\n        emit BountyReleased();\\n    }\\n\\n    /*\\n        Tx 4: claim bounty\\n        * function to submit preimage of hashed input\\n        * only callable if SHA256 of preimage matched hashed input\\n        * only callable if bounty is complete\\n    */\\n    function claimBounty(uint[] memory _input) public {\\n        require(_input.length == 2, \\\"Invalid input length\\\"); // TODO: support arbitrary length\\n        require(msg.sender == bountyHunter, \\\"Only bounty hunter can claim bounty\\\");\\n        require(isComplete, \\\"Bounty is not complete\\\");\\n        require(address(this).balance > 0, \\\"Bounty already claimed\\\");\\n\\n        // check if preimage matches hashed input\\n        require(\\n            sha256(abi.encode(_input[0], _input[1])) == concatDigest(hashedInput[0], hashedInput[1]),\\n            \\\"Invalid preimage\\\"\\n        );\\n        input = _input;\\n        payable(msg.sender).transfer(address(this).balance);\\n\\n        emit BountyClaimed();\\n    }\\n\\n    // function to concat input into digest\\n    function concatDigest(uint input1, uint input2) public pure returns (bytes32) {\\n        return bytes32((input1 << 128) + input2);\\n    }\\n\\n    // view function to verify proof\\n    function verifyProof(\\n        uint[2] memory _a,\\n        uint[2][2] memory _b,\\n        uint[2] memory _c,\\n        uint[] memory _hashedInput\\n    ) public view returns (bool) {\\n        require(verifier != IVerifier(address(0)), \\\"Verifier not set\\\");\\n        return verifier.verifyProof(_a, _b, _c, _hashedInput);\\n    }\\n\\n    // function to cancel bounty and withdraw reward\\n\\n    // TODO: function to edit bounty details\\n}\\n\",\"keccak256\":\"0xce1a32c81eb858141db5d424133685abba7537173a5da01dfeb6466443eb4123\",\"license\":\"GPL-3.0\"},\"contracts/BountyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Bounty.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\ncontract BountyFactory {\\n    address public immutable bountyTemplate;\\n    address[] public bounties;\\n\\n    event BountyCreated(address indexed bounty);\\n\\n    constructor() {\\n        bountyTemplate = address(new Bounty());\\n    }\\n\\n    function createBounty(\\n        string memory _name,\\n        string memory _description,\\n        bytes memory _dataCID\\n    ) public payable returns (address) {\\n        require(msg.value > 0, \\\"BountyFactory: must send more than 0 wei to create bounty\\\");\\n        address clone = Clones.clone(bountyTemplate);\\n        Bounty(clone).initialize{value: msg.value}(msg.sender, _name, _description, _dataCID);\\n        bounties.push(clone);\\n        emit BountyCreated(clone);\\n        return clone;\\n    }\\n}\",\"keccak256\":\"0x1c5a3096c653f3c922979e0f3cf5c1f3181102d9b62c856f0cf1f107b9d49352\",\"license\":\"GPL-3.0\"},\"contracts/IVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.17;\\n\\ninterface IVerifier {\\n    function verifyProof(\\n        uint[2] memory a,\\n        uint[2][2] memory b,\\n        uint[2] memory c,\\n        uint[] memory input\\n    ) external view returns (bool);\\n}\",\"keccak256\":\"0xf995461ca40acdb8036c7e36528b7f155524240c446d5b6d7fba57806f68f249\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161001d90610072565b604051809103906000f080158015610039573d6000803e3d6000fd5b5073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505061007f565b61368a806109e583390190565b6080516109456100a06000396000818160d3015261017f01526109456000f3fe6080604052600436106100345760003560e01c806347e6694714610039578063dc2f874414610064578063e21ee03d146100a1575b600080fd5b34801561004557600080fd5b5061004e6100d1565b60405161005b91906103c3565b60405180910390f35b34801561007057600080fd5b5061008b60048036038101906100869190610428565b6100f5565b60405161009891906103c3565b60405180910390f35b6100bb60048036038101906100b6919061063c565b610134565b6040516100c891906103c3565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b6000818154811061010557600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000803411610178576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161016f90610766565b60405180910390fd5b60006101a37f00000000000000000000000000000000000000000000000000000000000000006102c8565b90508073ffffffffffffffffffffffffffffffffffffffff1663267eb9ed34338888886040518663ffffffff1660e01b81526004016101e59493929190610849565b6000604051808303818588803b1580156101fe57600080fd5b505af1158015610212573d6000803e3d6000fd5b50505050506000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f296fd2c434595e170589ead76f71af701ab651dd12e03e8c108123ec7c809a7360405160405180910390a2809150509392505050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f09050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361037d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610374906108ef565b60405180910390fd5b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103ad82610382565b9050919050565b6103bd816103a2565b82525050565b60006020820190506103d860008301846103b4565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610405816103f2565b811461041057600080fd5b50565b600081359050610422816103fc565b92915050565b60006020828403121561043e5761043d6103e8565b5b600061044c84828501610413565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6104a88261045f565b810181811067ffffffffffffffff821117156104c7576104c6610470565b5b80604052505050565b60006104da6103de565b90506104e6828261049f565b919050565b600067ffffffffffffffff82111561050657610505610470565b5b61050f8261045f565b9050602081019050919050565b82818337600083830152505050565b600061053e610539846104eb565b6104d0565b90508281526020810184848401111561055a5761055961045a565b5b61056584828561051c565b509392505050565b600082601f83011261058257610581610455565b5b813561059284826020860161052b565b91505092915050565b600067ffffffffffffffff8211156105b6576105b5610470565b5b6105bf8261045f565b9050602081019050919050565b60006105df6105da8461059b565b6104d0565b9050828152602081018484840111156105fb576105fa61045a565b5b61060684828561051c565b509392505050565b600082601f83011261062357610622610455565b5b81356106338482602086016105cc565b91505092915050565b600080600060608486031215610655576106546103e8565b5b600084013567ffffffffffffffff811115610673576106726103ed565b5b61067f8682870161056d565b935050602084013567ffffffffffffffff8111156106a05761069f6103ed565b5b6106ac8682870161056d565b925050604084013567ffffffffffffffff8111156106cd576106cc6103ed565b5b6106d98682870161060e565b9150509250925092565b600082825260208201905092915050565b7f426f756e7479466163746f72793a206d7573742073656e64206d6f726520746860008201527f616e20302077656920746f2063726561746520626f756e747900000000000000602082015250565b60006107506039836106e3565b915061075b826106f4565b604082019050919050565b6000602082019050818103600083015261077f81610743565b9050919050565b600081519050919050565b60005b838110156107af578082015181840152602081019050610794565b60008484015250505050565b60006107c682610786565b6107d081856106e3565b93506107e0818560208601610791565b6107e98161045f565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b600061081b826107f4565b61082581856107ff565b9350610835818560208601610791565b61083e8161045f565b840191505092915050565b600060808201905061085e60008301876103b4565b818103602083015261087081866107bb565b9050818103604083015261088481856107bb565b905081810360608301526108988184610810565b905095945050505050565b7f455243313136373a20637265617465206661696c656400000000000000000000600082015250565b60006108d96016836106e3565b91506108e4826108a3565b602082019050919050565b60006020820190508181036000830152610908816108cc565b905091905056fea2646970667358221220f3c7103ed36095f45ac761d201d24291398ec31fb1fe898ff636be4307d8c37d64736f6c63430008110033608060405234801561001057600080fd5b5061366a806100206000396000f3fe6080604052600436106101815760003560e01c80637f43be53116100d1578063c404ede91161008a578063cffe3ba011610064578063cffe3ba014610557578063d9a7b98b14610594578063f0fdf834146105bf578063f2fde38b146105fc57610181565b8063c404ede9146104c4578063ce6e1c4e146104ef578063cf77cea81461052c57610181565b80637f43be53146103a05780638da5cb5b146103dd5780638dcaed5514610408578063ad19b7c614610431578063b2fa1c9e1461045c578063c32e370e1461048757610181565b80632b7ac3f31161013e5780634f8dd50d116101185780634f8dd50d146102e45780635a34e0df14610321578063715018a61461035e5780637284e4161461037557610181565b80632b7ac3f314610265578063330da3d414610290578063436e6270146102b957610181565b806304b4b8c51461018657806306fdde03146101b15780630d112009146101dc5780631d8a37691461020757806321f103a61461021e578063267eb9ed14610249575b600080fd5b34801561019257600080fd5b5061019b610625565b6040516101a891906119a8565b60405180910390f35b3480156101bd57600080fd5b506101c661064b565b6040516101d39190611a53565b60405180910390f35b3480156101e857600080fd5b506101f16106d9565b6040516101fe9190611a91565b60405180910390f35b34801561021357600080fd5b5061021c6106de565b005b34801561022a57600080fd5b506102336107d8565b6040516102409190611b01565b60405180910390f35b610263600480360381019061025e9190611d39565b610866565b005b34801561027157600080fd5b5061027a610a24565b6040516102879190611e53565b60405180910390f35b34801561029c57600080fd5b506102b760048036038101906102b29190611f6c565b610a4a565b005b3480156102c557600080fd5b506102ce610d6c565b6040516102db9190611a91565b60405180910390f35b3480156102f057600080fd5b5061030b60048036038101906103069190611fb5565b610d71565b6040516103189190611ff1565b60405180910390f35b34801561032d57600080fd5b5061034860048036038101906103439190611fb5565b610d8c565b6040516103559190611ff1565b60405180910390f35b34801561036a57600080fd5b50610373610db0565b005b34801561038157600080fd5b5061038a610dc4565b6040516103979190611a53565b60405180910390f35b3480156103ac57600080fd5b506103c760048036038101906103c2919061200c565b610e52565b6040516103d49190612065565b60405180910390f35b3480156103e957600080fd5b506103f2610e6f565b6040516103ff91906119a8565b60405180910390f35b34801561041457600080fd5b5061042f600480360381019061042a91906121e2565b610e99565b005b34801561043d57600080fd5b506104466112ab565b6040516104539190611b01565b60405180910390f35b34801561046857600080fd5b50610471611339565b60405161047e91906122f6565b60405180910390f35b34801561049357600080fd5b506104ae60048036038101906104a99190612311565b61134c565b6040516104bb91906122f6565b60405180910390f35b3480156104d057600080fd5b506104d961148a565b6040516104e69190611b01565b60405180910390f35b3480156104fb57600080fd5b5061051660048036038101906105119190611fb5565b611518565b6040516105239190611ff1565b60405180910390f35b34801561053857600080fd5b5061054161153c565b60405161054e9190611a91565b60405180910390f35b34801561056357600080fd5b5061057e6004803603810190610579919061200c565b611541565b60405161058b9190611ff1565b60405180910390f35b3480156105a057600080fd5b506105a961156f565b6040516105b69190611a91565b60405180910390f35b3480156105cb57600080fd5b506105e660048036038101906105e19190611fb5565b611574565b6040516105f39190611ff1565b60405180910390f35b34801561060857600080fd5b50610623600480360381019061061e9190612396565b61158f565b005b606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60658054610658906123f2565b80601f0160208091040260200160405190810160405280929190818152602001828054610684906123f2565b80156106d15780601f106106a6576101008083540402835291602001916106d1565b820191906000526020600020905b8154815290600101906020018083116106b457829003601f168201915b505050505081565b601281565b6106e6611612565b607560009054906101000a900460ff1615610736576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072d9061246f565b60405180910390fd5b6000606c60006002811061074d5761074c61248f565b5b01540361078f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078690612530565b60405180910390fd5b6001607560006101000a81548160ff0219169083151502179055507f45548bf4d20d74cd3a7a30bc6c9864aa12f0791d19a62c7e6978a55f444c98ca60405160405180910390a1565b606980546107e5906123f2565b80601f0160208091040260200160405190810160405280929190818152602001828054610811906123f2565b801561085e5780601f106108335761010080835404028352916020019161085e565b820191906000526020600020905b81548152906001019060200180831161084157829003601f168201915b505050505081565b60008060019054906101000a900460ff161590508080156108975750600160008054906101000a900460ff1660ff16105b806108c457506108a630611690565b1580156108c35750600160008054906101000a900460ff1660ff16145b5b610903576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fa906125c2565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610940576001600060016101000a81548160ff0219169083151502179055505b60003411610983576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097a90612654565b60405180910390fd5b61098b6116b3565b6109948561158f565b83606590816109a39190612816565b5082606690816109b39190612816565b5081606790816109c39190612943565b508015610a1d5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610a149190612a50565b60405180910390a15b5050505050565b606b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6002815114610a8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8590612ab7565b60405180910390fd5b606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1590612b49565b60405180910390fd5b607560009054906101000a900460ff16610b6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6490612bb5565b60405180910390fd5b60004711610bb0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba790612c21565b60405180910390fd5b610bf86074600081548110610bc857610bc761248f565b5b90600052602060002001546074600181548110610be857610be761248f565b5b9060005260206000200154610e52565b600282600081518110610c0e57610c0d61248f565b5b602002602001015183600181518110610c2a57610c2961248f565b5b6020026020010151604051602001610c43929190612c41565b604051602081830303815290604052604051610c5f9190612ca6565b602060405180830381855afa158015610c7c573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610c9f9190612ce9565b14610cdf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd690612d62565b60405180910390fd5b8060769080519060200190610cf592919061183b565b503373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610d3c573d6000803e3d6000fd5b507f861fbe132e4ab69b880ef4638db144df98fccfc72599a4a18bc953a261eaa2c360405160405180910390a150565b602081565b60728160028110610d8157600080fd5b016000915090505481565b60748181548110610d9c57600080fd5b906000526020600020016000915090505481565b610db8611612565b610dc2600061170c565b565b60668054610dd1906123f2565b80601f0160208091040260200160405190810160405280929190818152602001828054610dfd906123f2565b8015610e4a5780601f10610e1f57610100808354040283529160200191610e4a565b820191906000526020600020905b815481529060010190602001808311610e2d57829003601f168201915b505050505081565b600081608084901b610e649190612db1565b60001b905092915050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6004815114610edd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed490612e31565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610f6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6590612e9d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603610fdd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd490612f09565b60405180910390fd5b600160556012602061102585600281518110610ffc57610ffb61248f565b5b6020026020010151866003815181106110185761101761248f565b5b6020026020010151610e52565b604051602001611039959493929190612f80565b60405160208183030381529060405280519060200120606760405161105e9190613062565b6040518091039020146110a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109d906130c5565b60405180910390fd5b84606b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c32e370e858585856040518563ffffffff1660e01b81526004016111489493929190613325565b602060405180830381865afa158015611165573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611189919061339f565b6111c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111bf90613418565b60405180910390fd5b83606c9060026111d9929190611888565b5082606e9060026111eb9291906118c8565b508160729060026111fd929190611888565b50806074908051906020019061121492919061183b565b5086606990816112249190612943565b5085606a90816112349190612943565b5033606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f1b0c0dd832de03dc3b6f1d5ec24c8bd3b9ee786e380c868cfce39066dabf41fc60405160405180910390a150505050505050565b606780546112b8906123f2565b80601f01602080910402602001604051908101604052809291908181526020018280546112e4906123f2565b80156113315780601f1061130657610100808354040283529160200191611331565b820191906000526020600020905b81548152906001019060200180831161131457829003601f168201915b505050505081565b607560009054906101000a900460ff1681565b60008073ffffffffffffffffffffffffffffffffffffffff16606b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036113de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d590613484565b60405180910390fd5b606b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c32e370e868686866040518563ffffffff1660e01b815260040161143f9493929190613325565b602060405180830381865afa15801561145c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611480919061339f565b9050949350505050565b606a8054611497906123f2565b80601f01602080910402602001604051908101604052809291908181526020018280546114c3906123f2565b80156115105780601f106114e557610100808354040283529160200191611510565b820191906000526020600020905b8154815290600101906020018083116114f357829003601f168201915b505050505081565b6076818154811061152857600080fd5b906000526020600020016000915090505481565b600181565b606e826002811061155157600080fd5b60020201816002811061156357600080fd5b01600091509150505481565b605581565b606c816002811061158457600080fd5b016000915090505481565b611597611612565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611606576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115fd90613516565b60405180910390fd5b61160f8161170c565b50565b61161a6117d2565b73ffffffffffffffffffffffffffffffffffffffff16611638610e6f565b73ffffffffffffffffffffffffffffffffffffffff161461168e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168590613582565b60405180910390fd5b565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611702576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116f990613614565b60405180910390fd5b61170a6117da565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600060019054906101000a900460ff16611829576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161182090613614565b60405180910390fd5b6118396118346117d2565b61170c565b565b828054828255906000526020600020908101928215611877579160200282015b8281111561187657825182559160200191906001019061185b565b5b5090506118849190611918565b5090565b82600281019282156118b7579160200282015b828111156118b657825182559160200191906001019061189b565b5b5090506118c49190611918565b5090565b82600280028101928215611907579160200282015b82811115611906578251829060026118f6929190611888565b50916020019190600201906118dd565b5b5090506119149190611935565b5090565b5b80821115611931576000816000905550600101611919565b5090565b5b80821115611955576000818161194c9190611959565b50600201611936565b5090565b506000815560010160009055565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061199282611967565b9050919050565b6119a281611987565b82525050565b60006020820190506119bd6000830184611999565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156119fd5780820151818401526020810190506119e2565b60008484015250505050565b6000601f19601f8301169050919050565b6000611a25826119c3565b611a2f81856119ce565b9350611a3f8185602086016119df565b611a4881611a09565b840191505092915050565b60006020820190508181036000830152611a6d8184611a1a565b905092915050565b600060ff82169050919050565b611a8b81611a75565b82525050565b6000602082019050611aa66000830184611a82565b92915050565b600081519050919050565b600082825260208201905092915050565b6000611ad382611aac565b611add8185611ab7565b9350611aed8185602086016119df565b611af681611a09565b840191505092915050565b60006020820190508181036000830152611b1b8184611ac8565b905092915050565b6000604051905090565b600080fd5b600080fd5b611b4081611987565b8114611b4b57600080fd5b50565b600081359050611b5d81611b37565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611ba582611a09565b810181811067ffffffffffffffff82111715611bc457611bc3611b6d565b5b80604052505050565b6000611bd7611b23565b9050611be38282611b9c565b919050565b600067ffffffffffffffff821115611c0357611c02611b6d565b5b611c0c82611a09565b9050602081019050919050565b82818337600083830152505050565b6000611c3b611c3684611be8565b611bcd565b905082815260208101848484011115611c5757611c56611b68565b5b611c62848285611c19565b509392505050565b600082601f830112611c7f57611c7e611b63565b5b8135611c8f848260208601611c28565b91505092915050565b600067ffffffffffffffff821115611cb357611cb2611b6d565b5b611cbc82611a09565b9050602081019050919050565b6000611cdc611cd784611c98565b611bcd565b905082815260208101848484011115611cf857611cf7611b68565b5b611d03848285611c19565b509392505050565b600082601f830112611d2057611d1f611b63565b5b8135611d30848260208601611cc9565b91505092915050565b60008060008060808587031215611d5357611d52611b2d565b5b6000611d6187828801611b4e565b945050602085013567ffffffffffffffff811115611d8257611d81611b32565b5b611d8e87828801611c6a565b935050604085013567ffffffffffffffff811115611daf57611dae611b32565b5b611dbb87828801611c6a565b925050606085013567ffffffffffffffff811115611ddc57611ddb611b32565b5b611de887828801611d0b565b91505092959194509250565b6000819050919050565b6000611e19611e14611e0f84611967565b611df4565b611967565b9050919050565b6000611e2b82611dfe565b9050919050565b6000611e3d82611e20565b9050919050565b611e4d81611e32565b82525050565b6000602082019050611e686000830184611e44565b92915050565b600067ffffffffffffffff821115611e8957611e88611b6d565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b611eb281611e9f565b8114611ebd57600080fd5b50565b600081359050611ecf81611ea9565b92915050565b6000611ee8611ee384611e6e565b611bcd565b90508083825260208201905060208402830185811115611f0b57611f0a611e9a565b5b835b81811015611f345780611f208882611ec0565b845260208401935050602081019050611f0d565b5050509392505050565b600082601f830112611f5357611f52611b63565b5b8135611f63848260208601611ed5565b91505092915050565b600060208284031215611f8257611f81611b2d565b5b600082013567ffffffffffffffff811115611fa057611f9f611b32565b5b611fac84828501611f3e565b91505092915050565b600060208284031215611fcb57611fca611b2d565b5b6000611fd984828501611ec0565b91505092915050565b611feb81611e9f565b82525050565b60006020820190506120066000830184611fe2565b92915050565b6000806040838503121561202357612022611b2d565b5b600061203185828601611ec0565b925050602061204285828601611ec0565b9150509250929050565b6000819050919050565b61205f8161204c565b82525050565b600060208201905061207a6000830184612056565b92915050565b600067ffffffffffffffff82111561209b5761209a611b6d565b5b602082029050919050565b60006120b96120b484612080565b611bcd565b905080602084028301858111156120d3576120d2611e9a565b5b835b818110156120fc57806120e88882611ec0565b8452602084019350506020810190506120d5565b5050509392505050565b600082601f83011261211b5761211a611b63565b5b60026121288482856120a6565b91505092915050565b600067ffffffffffffffff82111561214c5761214b611b6d565b5b602082029050919050565b600061216a61216584612131565b611bcd565b9050806040840283018581111561218457612183611e9a565b5b835b818110156121ad57806121998882612106565b845260208401935050604081019050612186565b5050509392505050565b600082601f8301126121cc576121cb611b63565b5b60026121d9848285612157565b91505092915050565b6000806000806000806000610180888a03121561220257612201611b2d565b5b600088013567ffffffffffffffff8111156122205761221f611b32565b5b61222c8a828b01611d0b565b975050602088013567ffffffffffffffff81111561224d5761224c611b32565b5b6122598a828b01611d0b565b965050604061226a8a828b01611b4e565b955050606061227b8a828b01612106565b94505060a061228c8a828b016121b7565b93505061012061229e8a828b01612106565b92505061016088013567ffffffffffffffff8111156122c0576122bf611b32565b5b6122cc8a828b01611f3e565b91505092959891949750929550565b60008115159050919050565b6122f0816122db565b82525050565b600060208201905061230b60008301846122e7565b92915050565b600080600080610120858703121561232c5761232b611b2d565b5b600061233a87828801612106565b945050604061234b878288016121b7565b93505060c061235c87828801612106565b92505061010085013567ffffffffffffffff81111561237e5761237d611b32565b5b61238a87828801611f3e565b91505092959194509250565b6000602082840312156123ac576123ab611b2d565b5b60006123ba84828501611b4e565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061240a57607f821691505b60208210810361241d5761241c6123c3565b5b50919050565b7f426f756e747920697320616c726561647920636f6d706c657465000000000000600082015250565b6000612459601a836119ce565b915061246482612423565b602082019050919050565b600060208201905081810360008301526124888161244c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f426f756e74792068756e74657220686173206e6f74207375626d69747465642060008201527f70726f6f66000000000000000000000000000000000000000000000000000000602082015250565b600061251a6025836119ce565b9150612525826124be565b604082019050919050565b600060208201905081810360008301526125498161250d565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006125ac602e836119ce565b91506125b782612550565b604082019050919050565b600060208201905081810360008301526125db8161259f565b9050919050565b7f426f756e747920726577617264206d757374206265206772656174657220746860008201527f616e203000000000000000000000000000000000000000000000000000000000602082015250565b600061263e6024836119ce565b9150612649826125e2565b604082019050919050565b6000602082019050818103600083015261266d81612631565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026126d67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612699565b6126e08683612699565b95508019841693508086168417925050509392505050565b600061271361270e61270984611e9f565b611df4565b611e9f565b9050919050565b6000819050919050565b61272d836126f8565b6127416127398261271a565b8484546126a6565b825550505050565b600090565b612756612749565b612761818484612724565b505050565b5b818110156127855761277a60008261274e565b600181019050612767565b5050565b601f8211156127ca5761279b81612674565b6127a484612689565b810160208510156127b3578190505b6127c76127bf85612689565b830182612766565b50505b505050565b600082821c905092915050565b60006127ed600019846008026127cf565b1980831691505092915050565b600061280683836127dc565b9150826002028217905092915050565b61281f826119c3565b67ffffffffffffffff81111561283857612837611b6d565b5b61284282546123f2565b61284d828285612789565b600060209050601f831160018114612880576000841561286e578287015190505b61287885826127fa565b8655506128e0565b601f19841661288e86612674565b60005b828110156128b657848901518255600182019150602085019450602081019050612891565b868310156128d357848901516128cf601f8916826127dc565b8355505b6001600288020188555050505b505050505050565b60008190508160005260206000209050919050565b601f82111561293e5761290f816128e8565b61291884612689565b81016020851015612927578190505b61293b61293385612689565b830182612766565b50505b505050565b61294c82611aac565b67ffffffffffffffff81111561296557612964611b6d565b5b61296f82546123f2565b61297a8282856128fd565b600060209050601f8311600181146129ad576000841561299b578287015190505b6129a585826127fa565b865550612a0d565b601f1984166129bb866128e8565b60005b828110156129e3578489015182556001820191506020850194506020810190506129be565b86831015612a0057848901516129fc601f8916826127dc565b8355505b6001600288020188555050505b505050505050565b6000819050919050565b6000612a3a612a35612a3084612a15565b611df4565b611a75565b9050919050565b612a4a81612a1f565b82525050565b6000602082019050612a656000830184612a41565b92915050565b7f496e76616c696420696e707574206c656e677468000000000000000000000000600082015250565b6000612aa16014836119ce565b9150612aac82612a6b565b602082019050919050565b60006020820190508181036000830152612ad081612a94565b9050919050565b7f4f6e6c7920626f756e74792068756e7465722063616e20636c61696d20626f7560008201527f6e74790000000000000000000000000000000000000000000000000000000000602082015250565b6000612b336023836119ce565b9150612b3e82612ad7565b604082019050919050565b60006020820190508181036000830152612b6281612b26565b9050919050565b7f426f756e7479206973206e6f7420636f6d706c65746500000000000000000000600082015250565b6000612b9f6016836119ce565b9150612baa82612b69565b602082019050919050565b60006020820190508181036000830152612bce81612b92565b9050919050565b7f426f756e747920616c726561647920636c61696d656400000000000000000000600082015250565b6000612c0b6016836119ce565b9150612c1682612bd5565b602082019050919050565b60006020820190508181036000830152612c3a81612bfe565b9050919050565b6000604082019050612c566000830185611fe2565b612c636020830184611fe2565b9392505050565b600081905092915050565b6000612c8082611aac565b612c8a8185612c6a565b9350612c9a8185602086016119df565b80840191505092915050565b6000612cb28284612c75565b915081905092915050565b612cc68161204c565b8114612cd157600080fd5b50565b600081519050612ce381612cbd565b92915050565b600060208284031215612cff57612cfe611b2d565b5b6000612d0d84828501612cd4565b91505092915050565b7f496e76616c696420707265696d61676500000000000000000000000000000000600082015250565b6000612d4c6010836119ce565b9150612d5782612d16565b602082019050919050565b60006020820190508181036000830152612d7b81612d3f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612dbc82611e9f565b9150612dc783611e9f565b9250828201905080821115612ddf57612dde612d82565b5b92915050565b7f496e76616c69642068617368656420696e707574206c656e6774680000000000600082015250565b6000612e1b601b836119ce565b9150612e2682612de5565b602082019050919050565b60006020820190508181036000830152612e4a81612e0e565b9050919050565b7f426f756e747920616c7265616479207375626d69747465640000000000000000600082015250565b6000612e876018836119ce565b9150612e9282612e51565b602082019050919050565b60006020820190508181036000830152612eb681612e7a565b9050919050565b7f496e76616c696420766572696669657220616464726573730000000000000000600082015250565b6000612ef36018836119ce565b9150612efe82612ebd565b602082019050919050565b60006020820190508181036000830152612f2281612ee6565b9050919050565b60008160f81b9050919050565b6000612f4182612f29565b9050919050565b612f59612f5482611a75565b612f36565b82525050565b6000819050919050565b612f7a612f758261204c565b612f5f565b82525050565b6000612f8c8288612f48565b600182019150612f9c8287612f48565b600182019150612fac8286612f48565b600182019150612fbc8285612f48565b600182019150612fcc8284612f69565b6020820191508190509695505050505050565b60008154612fec816123f2565b612ff68186612c6a565b94506001821660008114613011576001811461302657613059565b60ff1983168652811515820286019350613059565b61302f856128e8565b60005b8381101561305157815481890152600182019150602081019050613032565b838801955050505b50505092915050565b600061306e8284612fdf565b915081905092915050565b7f4461746120434944206d69736d61746368000000000000000000000000000000600082015250565b60006130af6011836119ce565b91506130ba82613079565b602082019050919050565b600060208201905081810360008301526130de816130a2565b9050919050565b600060029050919050565b600081905092915050565b6000819050919050565b61310e81611e9f565b82525050565b60006131208383613105565b60208301905092915050565b6000602082019050919050565b613142816130e5565b61314c81846130f0565b9250613157826130fb565b8060005b8381101561318857815161316f8782613114565b965061317a8361312c565b92505060018101905061315b565b505050505050565b600060029050919050565b600081905092915050565b6000819050919050565b600081905092915050565b6131c4816130e5565b6131ce81846131b0565b92506131d9826130fb565b8060005b8381101561320a5781516131f18782613114565b96506131fc8361312c565b9250506001810190506131dd565b505050505050565b600061321e83836131bb565b60408301905092915050565b6000602082019050919050565b61324081613190565b61324a818461319b565b9250613255826131a6565b8060005b8381101561328657815161326d8782613212565b96506132788361322a565b925050600181019050613259565b505050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000602082019050919050565b60006132d28261328e565b6132dc8185613299565b93506132e7836132aa565b8060005b838110156133185781516132ff8882613114565b975061330a836132ba565b9250506001810190506132eb565b5085935050505092915050565b60006101208201905061333b6000830187613139565b6133486040830186613237565b61335560c0830185613139565b81810361010083015261336881846132c7565b905095945050505050565b61337c816122db565b811461338757600080fd5b50565b60008151905061339981613373565b92915050565b6000602082840312156133b5576133b4611b2d565b5b60006133c38482850161338a565b91505092915050565b7f496e76616c69642070726f6f6600000000000000000000000000000000000000600082015250565b6000613402600d836119ce565b915061340d826133cc565b602082019050919050565b60006020820190508181036000830152613431816133f5565b9050919050565b7f5665726966696572206e6f742073657400000000000000000000000000000000600082015250565b600061346e6010836119ce565b915061347982613438565b602082019050919050565b6000602082019050818103600083015261349d81613461565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006135006026836119ce565b915061350b826134a4565b604082019050919050565b6000602082019050818103600083015261352f816134f3565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061356c6020836119ce565b915061357782613536565b602082019050919050565b6000602082019050818103600083015261359b8161355f565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b60006135fe602b836119ce565b9150613609826135a2565b604082019050919050565b6000602082019050818103600083015261362d816135f1565b905091905056fea2646970667358221220ec634e0405bcf4d27c871b8d63ccd4f4b7df01ee0867357c7c1ab5ec5772d71164736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100345760003560e01c806347e6694714610039578063dc2f874414610064578063e21ee03d146100a1575b600080fd5b34801561004557600080fd5b5061004e6100d1565b60405161005b91906103c3565b60405180910390f35b34801561007057600080fd5b5061008b60048036038101906100869190610428565b6100f5565b60405161009891906103c3565b60405180910390f35b6100bb60048036038101906100b6919061063c565b610134565b6040516100c891906103c3565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b6000818154811061010557600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000803411610178576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161016f90610766565b60405180910390fd5b60006101a37f00000000000000000000000000000000000000000000000000000000000000006102c8565b90508073ffffffffffffffffffffffffffffffffffffffff1663267eb9ed34338888886040518663ffffffff1660e01b81526004016101e59493929190610849565b6000604051808303818588803b1580156101fe57600080fd5b505af1158015610212573d6000803e3d6000fd5b50505050506000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f296fd2c434595e170589ead76f71af701ab651dd12e03e8c108123ec7c809a7360405160405180910390a2809150509392505050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f09050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361037d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610374906108ef565b60405180910390fd5b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103ad82610382565b9050919050565b6103bd816103a2565b82525050565b60006020820190506103d860008301846103b4565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610405816103f2565b811461041057600080fd5b50565b600081359050610422816103fc565b92915050565b60006020828403121561043e5761043d6103e8565b5b600061044c84828501610413565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6104a88261045f565b810181811067ffffffffffffffff821117156104c7576104c6610470565b5b80604052505050565b60006104da6103de565b90506104e6828261049f565b919050565b600067ffffffffffffffff82111561050657610505610470565b5b61050f8261045f565b9050602081019050919050565b82818337600083830152505050565b600061053e610539846104eb565b6104d0565b90508281526020810184848401111561055a5761055961045a565b5b61056584828561051c565b509392505050565b600082601f83011261058257610581610455565b5b813561059284826020860161052b565b91505092915050565b600067ffffffffffffffff8211156105b6576105b5610470565b5b6105bf8261045f565b9050602081019050919050565b60006105df6105da8461059b565b6104d0565b9050828152602081018484840111156105fb576105fa61045a565b5b61060684828561051c565b509392505050565b600082601f83011261062357610622610455565b5b81356106338482602086016105cc565b91505092915050565b600080600060608486031215610655576106546103e8565b5b600084013567ffffffffffffffff811115610673576106726103ed565b5b61067f8682870161056d565b935050602084013567ffffffffffffffff8111156106a05761069f6103ed565b5b6106ac8682870161056d565b925050604084013567ffffffffffffffff8111156106cd576106cc6103ed565b5b6106d98682870161060e565b9150509250925092565b600082825260208201905092915050565b7f426f756e7479466163746f72793a206d7573742073656e64206d6f726520746860008201527f616e20302077656920746f2063726561746520626f756e747900000000000000602082015250565b60006107506039836106e3565b915061075b826106f4565b604082019050919050565b6000602082019050818103600083015261077f81610743565b9050919050565b600081519050919050565b60005b838110156107af578082015181840152602081019050610794565b60008484015250505050565b60006107c682610786565b6107d081856106e3565b93506107e0818560208601610791565b6107e98161045f565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b600061081b826107f4565b61082581856107ff565b9350610835818560208601610791565b61083e8161045f565b840191505092915050565b600060808201905061085e60008301876103b4565b818103602083015261087081866107bb565b9050818103604083015261088481856107bb565b905081810360608301526108988184610810565b905095945050505050565b7f455243313136373a20637265617465206661696c656400000000000000000000600082015250565b60006108d96016836106e3565b91506108e4826108a3565b602082019050919050565b60006020820190508181036000830152610908816108cc565b905091905056fea2646970667358221220f3c7103ed36095f45ac761d201d24291398ec31fb1fe898ff636be4307d8c37d64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1124,
        "contract": "contracts/BountyFactory.sol:BountyFactory",
        "label": "bounties",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      }
    }
  }
}